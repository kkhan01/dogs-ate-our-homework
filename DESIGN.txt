DA DAWGS


LINKS:
    GitHub Repo: https://github.com/kylelin12/dogs-ate-our-homework
    GitHub Repo Clone: https://github.com/kylelin12/dogs-ate-our-homework.git
    GitHub SSH Clone: git@github.com:kylelin12/dogs-ate-our-homework.git 
    Systems Push Repo: https://github.com/mks65/enterprise
    SDL Docs: http://lazyfoo.net/tutorials/SDL/index.php 


GROUP:
    Group Name: DA DAWGS
    Full: Ahbab Ashraf, Khinshan Khan, Kyle Lin, Jeffrey Weng
    Formatted: ashrafA-khanK-linKyle-wengJ
    Project Codename: dogs ate our homework
    We work in teams! Secret Codenames: Khinhan and Kyle = KK; Ahbab and Jeffrey = AJ


DESCRIPTION:
    Project Name: Dogtris 


    A multiplayer tetris game pitting two players against each other, giving the win to the player who earns the most points. We wish to use networking to allow computers to connect. Instead of just pitting two computers only, other computers should be allowed to start a game as well. This will allow for multiple 2 player sessions to be active at once. If one of the players disconnects, it’s an automatic victory. We will be using SDL to allow users to interact with our game through a GUI and also allow us to implement complex features such as object collision, animations, and tracking object positions. 


VIRTUAL WHITEBOARD: (Features that can be added to the finished base game)
    -Animated dog goes across the row and ‘eats’ it
    -Sockets instead of pipes
    -Spectator system
    -Game won’t start until both players type `READY`


USER INTERFACE:
    We will be using a GUI created from the library SDL.
    *SDL Compiling instructions


FEATURES | TECHNICAL DESIGN: 

    Structures concept:
        Semaphores to limit number of games in play at once 
        Allocated memory to keep track of the board states
        Server and subservers to administer multiple games and control each game separately
        - Done via forking
        Shared memory to allow for two players to have the same pieces at the same time?
        Storing game data with files as well as possible all-time leaderboards
        - Using stat to get the data from the files
        Networking with pipe-like structures -- sockets 
        Signaling to confirm whether or not the user really wants to exit
        - If they do, the opponent gets a victory and both clients exit?
        Breakdown: (Refer to codenames section)
            - Server / Subserver: KK
            - Game Board (UI) / Save States: AJ
            - Game logic / Signaling: KK
            - Networking: AJ


TIMELINE: 
    1970 JAN 01 00:00:00  - Birth of the universe
    2017 DEC 27 10:00:00 - Submitted design document
    2017 DEC 30 --:--:--     - Have a board ready to go!  
    2018 JAN 01 00:00:01 - Learned SDL to the extent that we’re super comfortable
    2018 JUN 21 13:00:00 - Graduate
